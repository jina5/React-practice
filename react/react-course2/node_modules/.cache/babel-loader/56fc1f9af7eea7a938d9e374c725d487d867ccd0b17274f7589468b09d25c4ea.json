{"ast":null,"code":"var _jsxFileName = \"/Users/jina/Desktop/react/react-course2/src/pages/AllMeetups.js\",\n  _s = $RefreshSig$();\nimport MeetupList from '../components/meetups/MeetupList';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DUMMY_DATA = [{\n  id: \"m1\",\n  title: \"This is a first meetup\",\n  image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/2560px-Stadtbild_M%C3%BCnchen.jpg\",\n  address: \"Meetupstreet 5, 12345 Meetup City\",\n  description: \"This is a first, amazing meetup which you definitely should not miss. It will be a lot of fun!\"\n}, {\n  id: \"m2\",\n  title: \"This is a second meetup\",\n  image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/2560px-Stadtbild_M%C3%BCnchen.jpg\",\n  address: \"Meetupstreet 5, 12345 Meetup City\",\n  description: \"This is a first, amazing meetup which you definitely should not miss. It will be a lot of fun!\"\n}];\nfunction AllMeetupsPage() {\n  _s();\n  /*Fetch -> 프라미스 (비동기처리) 반환 ,\n  await async 하면 함수가 프로미스 반환함수가 되어 비동기처리임, 리액트 컴포넌트 아님, 리액트 컴포넌트는 동기식이어야 한다. jsx를 바로 반환해야한다. \n  응답을 받을때까지 값을 반환하는것을 미룰수없다.\n  /*임시 jsx를 로딩스피너로 반환해야 한다. 다음에 응답받은 jsx코드를 보낸다. \n  state를 통해 변화 인식! */\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  //라우터에 의해 로딩되는 페이지로 사용되는 컴포넌트라고 구분하기 위해 이름을 이렇게 지어줄뿐....\n\n  fetch(\"https://react-getting-started-2c59b-default-rtdb.firebaseio.com/meetups.json\").then(response => {\n    return response.json(); /* json도 프라미스 반환하기때문에 프라미스 해결될때 까지 기다려야 한다. */\n  }).then(data => {});\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"All Meetups \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupList, {\n      meetups: DUMMY_DATA\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(AllMeetupsPage, \"EmvgwIb3cHpoFpeP+WmEDbjx4y4=\");\n_c = AllMeetupsPage;\nexport default AllMeetupsPage;\nvar _c;\n$RefreshReg$(_c, \"AllMeetupsPage\");","map":{"version":3,"names":["MeetupList","useState","DUMMY_DATA","id","title","image","address","description","AllMeetupsPage","isLoading","setIsLoading","fetch","then","response","json","data"],"sources":["/Users/jina/Desktop/react/react-course2/src/pages/AllMeetups.js"],"sourcesContent":["import MeetupList from '../components/meetups/MeetupList'\nimport {useState} from 'react';\nconst DUMMY_DATA = [\n  {\n    id: \"m1\",\n    title: \"This is a first meetup\",\n    image:\n      \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/2560px-Stadtbild_M%C3%BCnchen.jpg\",\n    address: \"Meetupstreet 5, 12345 Meetup City\",\n    description:\n      \"This is a first, amazing meetup which you definitely should not miss. It will be a lot of fun!\",\n  },\n  {\n    id: \"m2\",\n    title: \"This is a second meetup\",\n    image:\n      \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/2560px-Stadtbild_M%C3%BCnchen.jpg\",\n    address: \"Meetupstreet 5, 12345 Meetup City\",\n    description:\n      \"This is a first, amazing meetup which you definitely should not miss. It will be a lot of fun!\",\n  },\n];\n\nfunction AllMeetupsPage() {\n\n    /*Fetch -> 프라미스 (비동기처리) 반환 ,\n  await async 하면 함수가 프로미스 반환함수가 되어 비동기처리임, 리액트 컴포넌트 아님, 리액트 컴포넌트는 동기식이어야 한다. jsx를 바로 반환해야한다. \n  응답을 받을때까지 값을 반환하는것을 미룰수없다.\n  /*임시 jsx를 로딩스피너로 반환해야 한다. 다음에 응답받은 jsx코드를 보낸다. \n  state를 통해 변화 인식! */\n\n    const [isLoading, setIsLoading] = useState(false);\n\n  //라우터에 의해 로딩되는 페이지로 사용되는 컴포넌트라고 구분하기 위해 이름을 이렇게 지어줄뿐....\n\n  fetch(\n    \"https://react-getting-started-2c59b-default-rtdb.firebaseio.com/meetups.json\"\n  ).then(response=> {\n      return response.json(); /* json도 프라미스 반환하기때문에 프라미스 해결될때 까지 기다려야 한다. */\n\n  }).then(data => {\n\n\n  })\n  return (\n    <section>\n      <h1>All Meetups </h1>\n        <MeetupList meetups={DUMMY_DATA}/>\n    </section>\n  );\n}\nexport default AllMeetupsPage;\n"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,kCAAkC;AACzD,SAAQC,QAAQ,QAAO,OAAO;AAAC;AAC/B,MAAMC,UAAU,GAAG,CACjB;EACEC,EAAE,EAAE,IAAI;EACRC,KAAK,EAAE,wBAAwB;EAC/BC,KAAK,EACH,wHAAwH;EAC1HC,OAAO,EAAE,mCAAmC;EAC5CC,WAAW,EACT;AACJ,CAAC,EACD;EACEJ,EAAE,EAAE,IAAI;EACRC,KAAK,EAAE,yBAAyB;EAChCC,KAAK,EACH,wHAAwH;EAC1HC,OAAO,EAAE,mCAAmC;EAC5CC,WAAW,EACT;AACJ,CAAC,CACF;AAED,SAASC,cAAc,GAAG;EAAA;EAEtB;AACJ;AACA;AACA;AACA;;EAEI,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;;EAEnD;;EAEAU,KAAK,CACH,8EAA8E,CAC/E,CAACC,IAAI,CAACC,QAAQ,IAAG;IACd,OAAOA,QAAQ,CAACC,IAAI,EAAE,CAAC,CAAC;EAE5B,CAAC,CAAC,CAACF,IAAI,CAACG,IAAI,IAAI,CAGhB,CAAC,CAAC;EACF,oBACE;IAAA,wBACE;MAAA,UAAI;IAAY;MAAA;MAAA;MAAA;IAAA,QAAK,eACnB,QAAC,UAAU;MAAC,OAAO,EAAEb;IAAW;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QAC5B;AAEd;AAAC,GA3BQM,cAAc;AAAA,KAAdA,cAAc;AA4BvB,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}